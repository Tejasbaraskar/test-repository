package com.zensar;

import java.lang.management.MemoryType;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import javax.swing.text.html.FormSubmitEvent.MethodType;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.zensar.beans.Admin;
import com.zensar.beans.FlightBean;
import com.zensar.beans.Users;
import com.zensar.services.FlightService2;

@Controller
public class IndexController
{
	
	 @Autowired
		private RestTemplate restTemplate;
	
	 @Autowired
		FlightService2 service;
	
	
	@RequestMapping("/index")
	public String index()
	{
		return "index";
	}
	
	@RequestMapping("/login")
	public String login()
	{
		return "login";
	}
	
	@PostMapping("/login")
	public Users userRegister(@ModelAttribute("users") Users users)
	{
		return restTemplate.postForObject( "http://localhost:9092/user/createUser", users, Users.class );
		
		
	}
	
	
	@RequestMapping("/createAccount")
	public String createAccount()
	{
		return "createAccount";
	}
	
	@RequestMapping("/availableFlights")
	public String availableFlights()
	{
		return "availableFlights";
	}
	
	@RequestMapping("/help")
	public String help()
	{
		return "help";
	}
	
	@RequestMapping("/about")
	public String about()
	{
		return "about";
	}
	
	@RequestMapping("/blog")
	public String blog()
	{
		return "blog";
	}
	
//	@RequestMapping("/confirmTicket")
//	public String confirmTicket()
//	{
//		return "confirmTicket";
//	}
	
	@PostMapping("/confirmTicket1")
	public String confirmTicket2(@ModelAttribute("users") Users users)
	{
		Users postForObject = restTemplate.postForObject( "http://localhost:9092/user/login", users, Users.class );
		
		System.out.println("inside confirmTicket2");
		System.out.println(postForObject);
		
		if(postForObject!=null)
		return "confirmTicket";
		else
			return "login";
	}

	
	
	
	@RequestMapping("/payment")
	public String payment()
	{
		return "payment";
	}
	
	@RequestMapping("/adminLogin")
	public String adminLogin()
	{
		return "adminLogin";
	}
	
	@RequestMapping("/adminProfile")
	public String adminProfile(@ModelAttribute("admin") Admin admin)
	{
		System.out.println("inside adminProfile");
        Admin postForObject = restTemplate.postForObject( "http://localhost:9092/admin/adminProfile", admin, Admin.class );
		
		System.out.println("inside adminProfile");
		System.out.println(postForObject);
		
		if(postForObject!=null)
		return "adminProfile";
		else
			return "adminLogin";
		
	}
	
	@RequestMapping("/myBookings")
	public String myBookings()
	{
		return "myBookings";
	}
	
	@RequestMapping("/cancel")
	public String cancel()
	{
		return "cancel";
	}
	
	@RequestMapping("/userProfile")
	public String userProfile()
	{
		return "userProfile";
	}
	
	@RequestMapping("/myOffers")
	public String myOffers()
	{
		return "myOffers";
	}
	
	@RequestMapping("/addFlight")
	public String addFlight()
	{
		return "addFlight";
	}
	
	@PostMapping(value={"/addnewflight1"})
	 //@RequestMapping(value="/addnewflight1" , method={RequestMethod.GET,RequestMethod.POST})
	public String newFlight(@ModelAttribute FlightBean flight)
	{
		System.out.println(flight.getFromCity());
		 FlightBean postForObject = restTemplate.postForObject( "http://localhost:9092/flight/flightAdded", flight, FlightBean.class );
		
		 service.insertFlight(flight);
		 
		 return "addFlight";
		
	}
//	@GetMapping("/addnewflight1")
//	public String newFlight1()
//	{
//		return "addFlight";
//	}
	
	@RequestMapping("/updateFlight")
	public String updateFlight()
	{
		return "updateFlight";
	}
	
	@RequestMapping("/deleteFlight")
	public String deleteFlight()
	{
		return "deleteFlight";
	}
	
	@RequestMapping("/addNewAdmin")
	public Admin addNewAdmin(@ModelAttribute Admin admin1)
	{
		
		System.out.println(admin1.getEmail());
		return restTemplate.postForObject( "http://localhost:9092/admin/adminAdded", admin1, Admin.class );
		
	}
	
	@RequestMapping("/availableFlights1")
	public String availableFlights1(@ModelAttribute FlightBean flight1,Model model)
	{
		
		System.out.println("1");
		//return restTemplate.exchange("http://localhost:3000/products",HttpMethod.GET,flight1,FlightBean.class); 
	// return	 restTemplate.exchange1("http://localhost:3000/products", HttpMethod.GET, flight1, FlightBean.class);
		
		List<FlightBean> list = new ArrayList<>();
//		List<HttpMessageConverter<?>> list = new ArrayList<HttpMessageConverter<?>>();  
//		MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
//		converter.setSupportedMediaTypes(Collections.singletonList(MediaType.ALL));   
//		list.add(converter);  
//		restTemplate.setMessageConverters(list); 

		//list= (List<FlightBean>) restTemplate.postForObject("http://localhost:9092/flight/availableFlights",flight1, FlightBean.class);
	
		list=  (List<FlightBean>) restTemplate.postForObject("http://localhost:9092/flight/availableFlights",flight1, FlightBean.class);
		
		System.out.println("3");
		
		 
	       
	        
	        if(list.iterator().hasNext())
	        {
	            List<String> forDepartureTime = list.stream().map(FlightBean -> FlightBean.getDepartureTime()).collect(Collectors.toList());
	            String departureTime = forDepartureTime.get(0);
	            List<String> forArrivalTime = list.stream().map(FlightBean -> FlightBean.getArrivalTime()).collect(Collectors.toList());
	            String arrivalTime = forArrivalTime.get(0);
	            List<Integer> forPrice = list.stream().map(FlightBean -> FlightBean.getPrice()).collect(Collectors.toList());
	            Integer price = forPrice.get(0);
	             model.addAttribute("departureTime",departureTime);
	             model.addAttribute("arrivalTime",arrivalTime);
	             model.addAttribute("price",price);
	             return "availableFlights";
	        }
	        else
	            return "flightNotFound";
		
	}
		
	
	
	
}

